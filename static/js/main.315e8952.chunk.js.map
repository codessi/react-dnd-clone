{"version":3,"sources":["Card.js","App.js","index.js"],"names":["style","border","padding","marginBottom","backgroundColor","cursor","cardTarget","hover","props","monitor","component","dragIndex","getItem","index","hoverIndex","hoverBoundingRect","findDOMNode","getBoundingClientRect","hoverMiddleY","bottom","top","hoverClientY","getClientOffset","y","moveCard","Card","this","text","isDragging","connectDragSource","connectDropTarget","opacity","React","Component","flow","DragSource","beginDrag","id","connect","dragSource","DropTarget","dropTarget","update","require","App","state","cards","dragCard","setState","$splice","map","el","i","DragDropContext","HTML5Backend","ReactDOM","render","document","getElementById"],"mappings":"sQASMA,EAAQ,CACZC,OAAQ,kBACRC,QAAS,cACTC,aAAc,QACdC,gBAAiB,QACjBC,OAAQ,QAYJC,EAAa,CAEjBC,MAFiB,SAEXC,EAAOC,EAASC,GAIpB,IAAMC,EAAYF,EAAQG,UAAUC,MAE9BC,EAAaN,EAAMK,MAGzB,GAAIF,IAAcG,EAAlB,CAKA,IAAMC,EAAqBC,sBACzBN,GACCO,wBAGGC,GAAgBH,EAAkBI,OAASJ,EAAkBK,KAAO,EAMpEC,EAHeZ,EAAQa,kBAGOC,EAAIR,EAAkBK,IAMtDT,EAAYG,GAAcO,EAAeH,GAKzCP,EAAYG,GAAcO,EAAeH,IAK7CV,EAAMgB,SAASb,EAAWG,GAM1BL,EAAQG,UAAUC,MAAQC,MAIxBW,E,4JAGJ,WAAU,IAAD,EAMHC,KAAKlB,MAJPmB,EAFK,EAELA,KACAC,EAHK,EAGLA,WACAC,EAJK,EAILA,kBACAC,EALK,EAKLA,kBAEIC,EAAUH,EAAa,EAAI,EAEjC,OACEC,GACAC,GACAD,EACEC,EAAkB,qBAAK9B,MAAK,2BAAOA,GAAP,IAAc+B,YAAxB,SAAoCJ,U,GAhB3CK,IAAMC,WAsBVC,MACbC,qBACE,OAtFe,CACjBC,UADiB,SACP5B,GACR,MAAO,CACL6B,GAAI7B,EAAM6B,GACVxB,MAAOL,EAAMK,UAoFf,SAACyB,EAAS7B,GAAV,MAAuB,CACrBoB,kBAAmBS,EAAQC,aAC3BX,WAAYnB,EAAQmB,iBAGxBY,qBAAW,OAAQlC,GAAY,SAACgC,GAAD,MAAc,CAE3CR,kBAAmBQ,EAAQG,iBAXhBP,CAabT,G,iBC7GIiB,EAASC,EAAQ,KAEjBC,E,4MACJC,MAAQ,CACNC,MAAO,CAEL,CAACT,GAAI,EAEJV,KAAM,+BACP,CAACU,GAAI,EACJV,KAAM,0BACP,CAACU,GAAI,EACJV,KAAM,gBACP,CAACU,GAAI,EACJV,KAAM,0B,EAIXH,SAAW,SAACb,EAAWG,GAAgB,IAG/BiC,EADY,EAAKF,MAAfC,MACenC,GAEvB,EAAKqC,SACHN,EAAO,EAAKG,MAAO,CACjBC,MAAO,CAELG,QAAS,CAAC,CAACtC,EAAW,GAAI,CAACG,EAAY,EAAGiC,S,4CAMlD,WAAU,IAAD,OACP,OACE,8BACIrB,KAAKmB,MAAMC,MAAMI,KAAK,SAACC,EAAGC,GAC1B,OACE,cAAC,EAAD,CAAoBvC,MAAOuC,EAAGf,GAAIc,EAAGd,GAAIV,KAAMwB,EAAGxB,KAAMH,SAAU,EAAKA,UAA1D2B,EAAGd,a,GApCVJ,aA6CHoB,4BAAgBC,IAAhBD,CAA8BT,GC9C7CW,IAASC,OAEL,cAAC,EAAD,IACFC,SAASC,eAAe,U","file":"static/js/main.315e8952.chunk.js","sourcesContent":["// copy whole thing and insert inside of render. \nimport React from 'react'\nimport { findDOMNode } from 'react-dom';\nimport {\n  DragSource,\n  DropTarget\n} from 'react-dnd';\nimport flow from 'lodash.flow';\n\nconst style = {\n  border: '1px dashed gray',\n  padding: '0.5rem 1rem',\n  marginBottom: '.5rem',\n  backgroundColor: 'white',\n  cursor: 'move',\n};\n\nconst cardSource = {\n  beginDrag(props) {\n    return {\n      id: props.id,\n      index: props.index,\n    }\n  },\n};\n\nconst cardTarget = {\n  // is not function it's object.  that has one funtion called hover that takes prop monior compeond nand it will return nothing if dr.. hove.. is same \n  hover(props, monitor, component) {\n    // console.log(monitor)\n    // console.log(\"props is \" + JSON.stringify(props))\n   \n    const dragIndex = monitor.getItem().index\n\n    const hoverIndex = props.index\n\n\n    if (dragIndex === hoverIndex) {\n      return;\n    }\n   // \n    // Determine rectangle on screen\n    const hoverBoundingRect = (findDOMNode(\n      component,\n    )).getBoundingClientRect();\n\n    // Get vertical middle\n    const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\n\n    // Determine mouse position\n    const clientOffset = monitor.getClientOffset();\n\n    // Get pixels to the top\n    const hoverClientY = (clientOffset).y - hoverBoundingRect.top;\n\n    // Only perform the move when the mouse has crossed half of the items height\n    // When dragging downwards, only move when the cursor is below 50%\n    // When dragging upwards, only move when the cursor is above 50%\n    // Dragging downwards\n    if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n      return;\n    }\n\n    // Dragging upwards\n    if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n      return;\n    }\n\n    // Time to actually perform the action\n    props.moveCard(dragIndex, hoverIndex);\n\n    // Note: we're mutating the monitor item here!\n    // Generally it's better to avoid mutations,\n    // but it's good here for the sake of performance\n    // to avoid expensive index searches.\n    monitor.getItem().index = hoverIndex;\n  },\n}\n\nclass Card extends React.Component {\n\n\n  render() {\n    const {\n      text,\n      isDragging,\n      connectDragSource,\n      connectDropTarget,\n    } = this.props;\n    const opacity = isDragging ? 0 : 1;\n\n    return (\n      connectDragSource &&\n      connectDropTarget &&\n      connectDragSource(\n        connectDropTarget(<div style={{ ...style, opacity }}>{text}</div>),\n      )\n    );\n  }\n}\n\nexport default flow(\n  DragSource(\n    'card',\n    cardSource,\n    (connect, monitor) => ({\n      connectDragSource: connect.dragSource(),\n      isDragging: monitor.isDragging(),\n    }),\n  ),\n  DropTarget('card', cardTarget, (connect) => ({\n    // we put cardTarget here ok.... \n    connectDropTarget: connect.dropTarget(),\n  }))\n)(Card);\n","import React, { Component } from 'react'\nimport Card from './Card'\n\nimport HTML5Backend from 'react-dnd-html5-backend'\nimport { DragDropContext } from 'react-dnd'\nconst update = require('immutability-helper');\n\nclass App extends Component {\n  state = {\n    cards: [\n      //property - card   key- array\n      {id: 1,\n        // object \n       text: 'Write a cool JSaaaa library'},\n      {id: 2,\n       text: 'Make it generic enough'},\n      {id: 3,\n       text: 'Write README'},\n      {id: 4,\n       text: 'Create some examples'},  \n    ]\n  }\n\n  moveCard = (dragIndex, hoverIndex) => {\n\n    const { cards } = this.state\n    const dragCard = cards[dragIndex]\n   \n    this.setState(\n      update(this.state, {\n        cards: {\n          // what is $splice\n          $splice: [[dragIndex, 1], [hoverIndex, 0, dragCard]],\n        },\n      }),\n    )\n  }\n\n  render() {\n    return (\n      <div>\n        { this.state.cards.map ((el,i) => {\n          return (\n            <Card key=  {el.id} index={i} id={el.id} text={el.text} moveCard={this.moveCard} />\n          )\n        })}\n        \n      </div>\n    )\n  }\n}\n\nexport default DragDropContext(HTML5Backend)(App);\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n\n    <App />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}